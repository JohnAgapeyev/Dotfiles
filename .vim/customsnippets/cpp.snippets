extends c

snippet incc
#include <${1:iostream}>
endsnippet
snippet binc
#include <boost/${1:shared_ptr}.hpp>
endsnippet
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
snippet vector
std::vector<${1:T}> ${2};
endsnippet
snippet deque
std::deque<${1:T}> ${2};
endsnippet
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
snippet list
std::list<${1:T}> ${2};
endsnippet
snippet set
std::set<${1:T}> ${2};
endsnippet
snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
snippet stack
std::stack<${1:T}> ${2};
endsnippet
snippet queue
std::queue<${1:T}> ${2};
endsnippet
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
snippet pri
private
endsnippet
snippet pro
protected
endsnippet
snippet pub
public
endsnippet
snippet fr
friend
endsnippet
snippet mu
mutable
endsnippet
snippet ans
namespace {
	${0}
}
endsnippet
snippet cout
std::cout << ${1} << '\n';
endsnippet
snippet cin
std::cin >> ${1};
endsnippet
snippet sca
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet dca
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet rca
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet cca
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet
snippet fore
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}
endsnippet
snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet
snippet itera
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet
snippet ld
[${1}](${2}){${3}};
endsnippet
snippet lld
[${1}](${2}){
	${3}
};
endsnippet
snippet try
try {

}catch(${1}) {

}
endsnippet
snippet af "auto function"
auto ${1:name}(${2}) -> ${3:void} {
	${0}
};
endsnippet
priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});
	~${1/(\w+).*/$1/}();
	${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/}&) = default;
	${1/(\w+).*/$1/}(${1/(\w+).*/$1/}&&) = default;
	${1/(\w+).*/$1/}& operator=(${1/(\w+).*/$1/}&&) = default;
	${1/(\w+).*/$1/}& operator=(const ${1/(\w+).*/$1/}&) = default;

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp)) {
		v.insert(v.end(), buf, buf + len);
	}
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
private:
	$3

public:
	$1();
	~$1();
	$1(const $1&) = default;
	$1($1&&) = default;
	$1& operator=($1&&) = default;
	$1& operator=(const $1&) = default;
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param}) {
	${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:
