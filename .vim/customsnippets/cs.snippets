
snippet sim
	${1:public} static int Main(string[] args)
	{
		${0}
		return 0;
	}

endsnippet
snippet simc
	public class Application
	{
		${1:public} static int Main(string[] args)
		{
			${0}
			return 0;
		}
	}
endsnippet
snippet svm
	${1:public} static void Main(string[] args)
	{
		${0}
	}

endsnippet
snippet if
	if (${1:true})
	{
		${0:${VISUAL}}
	}
endsnippet
snippet el
	else
	{
		${0:${VISUAL}}
	}

endsnippet
snippet ifs
	if (${1})
		${0:${VISUAL}}
endsnippet
snippet t
	${1} ? ${2} : ${0}
endsnippet
snippet ?
	${1} ? ${2} : ${0}
endsnippet
snippet do
	do
	{
		${0:${VISUAL}}
	} while (${1:true});

endsnippet
snippet wh
	while (${1:true})
	{
		${0:${VISUAL}}
	}
endsnippet
snippet for
	for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})
	{
		${0}
	}

endsnippet
snippet forr
	for (int ${1:i} = ${2:length}; $1 >= 0; $1--)
	{
		${0}
	}
endsnippet
snippet fore
	foreach (${1:var} ${2:entry} in ${3})
	{
		${0}
	}

endsnippet
snippet foreach
	foreach (${1:var} ${2:entry} in ${3})
	{
		${0}
	}
endsnippet
snippet each
	foreach (${1:var} ${2:entry} in ${3})
	{
		${0}
	}

endsnippet
snippet interface
	public interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet if+
	public interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}

endsnippet
snippet class
	public class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls
	${2:public} class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}

endsnippet
snippet cls+
	public class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls+^
	public static class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}

endsnippet
snippet cls&
	internal class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls&^
	internal static class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}

endsnippet
snippet cls|
	protected class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
endsnippet
snippet cls|%
	protected abstract class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}

endsnippet
snippet ctor
	public ${1:`vim_snippets#Filename()`}()
	{
		${0}
	}
endsnippet
snippet prop
	${1:public} ${2:int} ${3} { get; set; }
endsnippet
snippet p
	${1:public} ${2:int} ${3} { get; set; }
endsnippet
snippet p+
	public ${1:int} ${2} { get; set; }
endsnippet
snippet p+&
	public ${1:int} ${2} { get; internal set; }
endsnippet
snippet p+|
	public ${1:int} ${2} { get; protected set; }
endsnippet
snippet p+-
	public ${1:int} ${2} { get; private set; }
endsnippet
snippet p&
	internal ${1:int} ${2} { get; set; }
endsnippet
snippet p&|
	internal ${1:int} ${2} { get; protected set; }
endsnippet
snippet p&-
	internal ${1:int} ${2} { get; private set; }
endsnippet
snippet p|
	protected ${1:int} ${2} { get; set; }
endsnippet
snippet p|-
	protected ${1:int} ${2} { get; private set; }
endsnippet
snippet p-
	private ${1:int} ${2} { get; set; }
endsnippet
snippet pi
	${1:public} int ${2} { get; set; }
endsnippet
snippet pi+
	public int ${1} { get; set; }
endsnippet
snippet pi+&
	public int ${1} { get; internal set; }
endsnippet
snippet pi+|
	public int ${1} { get; protected set; }
endsnippet
snippet pi+-
	public int ${1} { get; private set; }
endsnippet
snippet pi&
	internal int ${1} { get; set; }
endsnippet
snippet pi&|
	internal int ${1} { get; protected set; }
endsnippet
snippet pi&-
	internal int ${1} { get; private set; }
endsnippet
snippet pi|
	protected int ${1} { get; set; }
endsnippet
snippet pi|-
	protected int ${1} { get; private set; }
endsnippet
snippet pi-
	private int ${1} { get; set; }
endsnippet
snippet pb
	${1:public} bool ${2} { get; set; }
endsnippet
snippet pb+
	public bool ${1} { get; set; }
endsnippet
snippet pb+&
	public bool ${1} { get; internal set; }
endsnippet
snippet pb+|
	public bool ${1} { get; protected set; }
endsnippet
snippet pb+-
	public bool ${1} { get; private set; }
endsnippet
snippet pb&
	internal bool ${1} { get; set; }
endsnippet
snippet pb&|
	internal bool ${1} { get; protected set; }
endsnippet
snippet pb&-
	internal bool ${1} { get; private set; }
endsnippet
snippet pb|
	protected bool ${1} { get; set; }
endsnippet
snippet pb|-
	protected bool ${1} { get; private set; }
endsnippet
snippet pb-
	private bool ${1} { get; set; }
endsnippet
snippet ps
	${1:public} string ${2} { get; set; }
endsnippet
snippet ps+
	public string ${1} { get; set; }
endsnippet
snippet ps+&
	public string ${1} { get; internal set; }
endsnippet
snippet ps+|
	public string ${1} { get; protected set; }
endsnippet
snippet ps+-
	public string ${1} { get; private set; }
endsnippet
snippet ps&
	internal string ${1} { get; set; }
endsnippet
snippet ps&|
	internal string ${1} { get; protected set; }
endsnippet
snippet ps&-
	internal string ${1} { get; private set; }
endsnippet
snippet ps|
	protected string ${1} { get; set; }
endsnippet
snippet ps|-
	protected string ${1} { get; private set; }
endsnippet
snippet ps-
	private string ${1} { get; set; }
endsnippet
snippet m
	${1:public} ${2:void} ${3}(${4})
	{
		${0}
	}

endsnippet
snippet m+
	public ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet
snippet m&
	internal ${1:void} ${2}(${3})
	{
		${0}
	}

endsnippet
snippet m|
	protected ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet
snippet m-
	private ${1:void} ${2}(${3})
	{
		${0}
	}

endsnippet
snippet mi
	${1:public} int ${2}(${3})
	{
		${0:return 0;}
	}
endsnippet
snippet mi+
	public int ${1}(${2})
	{
		${0:return 0;}
	}

endsnippet
snippet mi&
	internal int ${1}(${2})
	{
		${0:return 0;}
	}
endsnippet
snippet mi|
	protected int ${1}(${2})
	{
		${0:return 0;}
	}

endsnippet
snippet mi-
	private int ${1}(${2})
	{
		${0:return 0;}
	}
endsnippet
snippet mb
	${1:public} bool ${2}(${3})
	{
		${0:return false;}
	}

endsnippet
snippet mb+
	public bool ${1}(${2})
	{
		${0:return false;}
	}
endsnippet
snippet mb&
	internal bool ${1}(${2})
	{
		${0:return false;}
	}

endsnippet
snippet mb|
	protected bool ${1}(${2})
	{
		${0:return false;}
	}
endsnippet
snippet mb-
	private bool ${1}(${2})
	{
		${0:return false;}
	}

endsnippet
snippet ms
	${1:public} string ${2}(${3})
	{
		${0:return "";}
	}
endsnippet
snippet ms+
	public string ${1}(${2})
	{
		${0:return "";}
	}

endsnippet
snippet ms&
	internal string ${1}(${2})
	{
		${0:return "";}
	}
endsnippet
snippet ms|
	protected string ${1:}(${2:})
	{
		${0:return "";}
	}

endsnippet
snippet ms-
	private string ${1}(${2})
	{
		${0:return "";}
	}
endsnippet
snippet struct
	public struct ${1:`vim_snippets#Filename()`}
	{
		${0}
	}

endsnippet
snippet enum
	enum ${1}
	{
		${0}
	}
endsnippet
snippet enum+
	public enum ${1}
	{
		${0}
	}

endsnippet
snippet #if
	#if
		${0}
	#endif

endsnippet
snippet ///
	/// <summary>
	/// ${0}
	/// </summary>

endsnippet
snippet <p
	<param name="${1}">${2:$1}</param>

endsnippet
snippet <ex
	<exception cref="${1:System.Exception}">${2}</exception>

endsnippet
snippet <r
	<returns>${1}</returns>

endsnippet
snippet <s
	<see cref="${1}"/>

endsnippet
snippet <rem
	<remarks>${1}</remarks>

endsnippet
snippet <c
	<code>${1}</code>

endsnippet
snippet cw
	Console.WriteLine(${1});

endsnippet
snippet eq
	public override bool Equals(object obj)
	{
		if (obj == null || GetType() != obj.GetType())
		{
			return false;
		}
		${0:throw new NotImplementedException();}
		return base.Equals(obj);
	}

endsnippet
snippet exc
	public class ${1:MyException} : ${2:Exception}
	{
		public $1() { }
		public $1(string message) : base(message) { }
		public $1(string message, Exception inner) : base(message, inner) { }
		protected $1(
			System.Runtime.Serialization.SerializationInfo info,
			System.Runtime.Serialization.StreamingContext context)
				: base(info, context) { }
	}
endsnippet
snippet index
	public ${1:object} this[${2:int} index]
	{
		get { ${0} }
		set { ${0} }
	}
endsnippet
snippet inv
	EventHandler temp = ${1:MyEvent};
	if (${2:temp} != null)
	{
		$2();
	}
endsnippet
snippet lock
	lock (${1:this})
	{
		${0}
	}

endsnippet
snippet namespace
	namespace ${1:MyNamespace}
	{
		${0}
	}
endsnippet
snippet prop
	public ${1:int} ${2:MyProperty} { get; set; }
endsnippet
snippet propf
	private ${1:int} ${2:myVar};
	public $1 ${3:MyProperty}
	{
		get { return $2; }
		set { $2 = value; }
	}

endsnippet
snippet propg
	public ${1:int} ${2:MyProperty} { get; private set; }

endsnippet
snippet switch
	switch (${1:switch_on})
	{
		${0}
		default:
	}

endsnippet
snippet try
	try
	{
		${0:${VISUAL}}
	}
	catch (${1:System.Exception})
	{
		throw;
	}
endsnippet
snippet tryf
	try
	{
		${0:${VISUAL}}
	}
	finally
	{
		${1}
	}

endsnippet
snippet usi
	using (${1:resource})
	{
		${0}
	}
endsnippet
#######################################################################
#                      C# Snippets for UltiSnips                      #
#######################################################################

priority -50

#########################
#  classes and structs  #
#########################

snippet namespace "namespace" b
namespace ${1:MyNamespace}
{
	${VISUAL}$0
}
endsnippet

snippet class "class" w
${1:public} class ${2:MyClass}
{
	$0
}
endsnippet

snippet struct "struct" w
struct ${1:MyStruct}
{
	$0
}
endsnippet

snippet interface "interface" w
interface I${1:Interface}
{
	$0
}
endsnippet

snippet enum "enumeration" b
enum ${1:MyEnum} { ${2:Item} };
endsnippet


############
#  Main()  #
############

snippet sim "static int main" b
static int Main(string[] args)
{
	$0
}
endsnippet

snippet svm "static void main" b
static void Main(string[] args)
{
	$0
}
endsnippet


################
#  properties  #
################

snippet prop "Simple property declaration" b
public ${1:int} ${2:MyProperty} { get; set; }
endsnippet

snippet propfull "Full property declaration" b
private ${1:int} ${2:_myProperty};

public $1 ${3:MyProperty}
{
	get { return $2; }
	set { $2 = value; }
}
endsnippet

snippet propg "Property with a private setter" b
public ${1:int} ${2:MyProperty} { get; private set; }
endsnippet


############
#  blocks  #
############

snippet #if "#if #endif" b
#if ${1:DEBUG}
${VISUAL}$0
#endif
endsnippet

snippet #region "#region #endregion" b
#region ${1:Region}
${VISUAL}$0
#endregion
endsnippet


###########
#  loops  #
###########

snippet for "for loop" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)
{
	${VISUAL}$0
}
endsnippet

snippet forr "for loop (reverse)" b
for (int ${1:i} = ${2:10}; $1 >= 0; $1--)
{
	${VISUAL}$0
}
endsnippet

snippet foreach "foreach loop" b
foreach (${3:var} ${2:item} in ${1:items})
{
	${VISUAL}$0
}
endsnippet

snippet while "while loop" b
while (${1:true})
{
	${VISUAL}$0
}
endsnippet

snippet do "do loop" b
do
{
	${VISUAL}$0
} while (${1:true});
endsnippet


###############
#  branching  #
###############

snippet if "if statement" b
if ($1)
{
	${VISUAL}$0
}
endsnippet

snippet ife "if else statement" b
if ($1)
{
	${VISUAL}$0
}
else
{
}
endsnippet

snippet elif "else if" b
else if ($1)
{
	$0
}
endsnippet

snippet elseif "else if" b
else if ($1)
{
	$0
}
endsnippet

snippet ifnn "if not null" b
if ($1 != null)
{
	${VISUAL}$0
}
endsnippet

snippet switch "switch statement" b
switch (${1:statement})
{
	case ${2:value}:
		break;

	default:
		$0break;
}
endsnippet

snippet case "case" b
case ${1:value}:
	$2
	break;
endsnippet


##############
#  wrappers  #
##############

snippet using "using statement" b
using (${1:resource})
{
	${VISUAL}$0
}
endsnippet

snippet unchecked "unchecked block" b
unchecked
{
	${VISUAL}$0
}
endsnippet

snippet checked "checked block" b
checked
{
	${VISUAL}$0
}
endsnippet

snippet unsafe "unsafe" b
unsafe
{
	${VISUAL}$0
}
endsnippet


########################
#  exception handling  #
########################

snippet try "try catch block" b
try
{
	${VISUAL}$0
}
catch (${1:Exception} ${2:e})
{
	throw;
}
endsnippet

snippet tryf "try finally block" b
try
{
	${VISUAL}$0
}
finally
{
}
endsnippet

snippet throw "throw"
throw new $1Exception("$2");
endsnippet


##########
#  LINQ  #
##########

snippet from "LINQ syntax" b
var ${1:seq} =
	from ${2:item1} in ${3:items1}
	join ${4:item2} in ${5:items2} on $2.${6:prop1} equals $4.${7:prop2}
	select ${8:$2.prop3}
	where ${9:clause}
endsnippet


############################
#  feedback and debugging  #
############################

snippet da "Debug.Assert" b
Debug.Assert(${1:true});
endsnippet

snippet cw "Console.WriteLine" b
Console.WriteLine("$1");
endsnippet

snippet cr "Console.ReadLine" b
Console.ReadLine();
endsnippet

# as you first type comma-separated parameters on the right, {n} values appear in the format string
snippet cwp "Console.WriteLine with parameters" b
Console.WriteLine("${2:`!p
snip.rv = ' '.join(['{' + str(i) + '}' for i in range(t[1].count(','))])
`}"${1:, something});
endsnippet

snippet mbox "Message box" b
MessageBox.Show("${1:message}");
endsnippet


#############
#  methods  #
#############

snippet equals "Equals method" b
public override bool Equals(object obj)
{
	if (obj == null || GetType() != obj.GetType())
	{
		return false;
	}
	$0
	return base.Equals(obj);
}
endsnippet

snippet mth "Method" b
${1:public} ${2:void} ${3:MyMethod}(${4})
{
	$0
}
endsnippet

snippet mths "Static method" b
${1:public} static ${2:void} ${3:MyMethod}(${4})
{
	$0
}
endsnippet

###############
# constructor #
###############

snippet ctor "Constructor" b
${1:public} ${2:`!p snip.rv = snip.basename or "untitled"`}(${3})
{
	$0
}
endsnippet

##############
#  comments  #
##############

snippet /// "XML summary comment" b
/// <summary>
/// $0
/// </summary>
endsnippet

snippet <p "XML pramameter comment" w
<param name="${1}">${2}</param>
endsnippet

snippet <ex "XML exception comment" w
<exception cref="${1:System.Exception}">${2}</exception>
endsnippet

snippet <r "XML returns comment" w
<returns>$0</returns>
endsnippet

snippet <c "XML code comment" w
<code>$0</code>
endsnippet
