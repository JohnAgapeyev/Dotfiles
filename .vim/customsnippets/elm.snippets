
snippet mod
	module `substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')` exposing (${1})
	${0}
endsnippet
snippet imp
	import ${0:Http}
endsnippet
snippet impe
	import ${1:Html} exposing (${0:..})
endsnippet
snippet impae
	import ${1:Json.Encode} as ${2:Encode} exposing (${0:Value})
endsnippet
snippet fn
	${1:fn} : ${2:a} -> ${3:a}
	$1 ${4} =
		${0}
endsnippet
snippet fn1
	${1:fn} : ${2:a} -> ${3:a}
	$1 ${4} =
		${0}
endsnippet
snippet fn2
	${1:fn} : ${2:a} -> ${3:a} -> ${4:a}
	$1 ${5} =
		${0}
endsnippet
snippet fn3
	${1:fn} : ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}
	$1 ${6} =
		${0}
endsnippet
snippet fn0
	${1:fn} : ${2:a}
	$1 =
		${0}
endsnippet
snippet case
	case ${1} of
		${2} ->
			${0}
endsnippet
snippet -
	${1} ->
		${0}

endsnippet
snippet let
	let
		${1} =
			${2}
	in
		${0}

endsnippet
snippet if
	if ${1} then
		${2:${VISUAL}}
	else
		${0}
endsnippet
snippet ty
	type ${1:Msg}
		= ${0}

endsnippet
snippet tya
	type alias ${1:Model} =
		${0}
endsnippet
snippet test
	test "${1}" <| \_ -> $0
endsnippet
snippet doc
	{-| ${0}
	-}

endsnippet
snippet p
	|> ${0}

endsnippet
snippet program
	import Html exposing (Html)

	type alias Model =
		{}

	type Msg
		= Noop

	main : Program Never Model Msg
	main =
		Html.program
			{ init = init
			, view = view
			, update = update
			, subscriptions = subscriptions
			}

	init : ( Model, Cmd Msg )
	init =
		{} ! []

	update : Msg -> Model -> ( Model, Cmd Msg )
	update msg model =
		case msg of
			Noop ->
				model ! []

	subscriptions : Model -> Sub Msg
	subscriptions model =
		Sub.none

	view : Model -> Html Msg
	view model =
		Html.text "Hello, sailor!"
endsnippet
priority -50

snippet impa "Qualified import"
import ${1:Json.Encode} as ${0:`!p snip.rv = t[1].split(".")[-1]`}
endsnippet

snippet impae "Qualified import with exposing"
import ${1:Json.Encode} as ${2:`!p snip.rv = t[1].split(".")[-1]`} exposing (${0:Value})
endsnippet
